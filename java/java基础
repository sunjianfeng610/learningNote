1、重载与重写
重载：同一个类中，方法名相同、返回值相同，方法参数不同；
重写：子类重写父类的方法，方法相同，参数相同，返回值相同。
2、抽象类与接口
抽象类：
1）关键字abstract；
2）抽象类不一定要有抽象方法，抽象方法一定在查抽象类中；
3）抽象类只支持单继承；
4）抽象类中可以包含具体的方法实现。
5）当抽取某一类事物的公有属性时，可以采用抽象。
接口：
1）关键字interface；
2）只有方法的声明没有方法实现；
3）接口中只能定义static类型的成员变量；
4）接口支持多实现；
5）当关注具体的操作时，使用接口。

3、基本数据类型
 int byte short char long double float boolean 
 
4、常用的集合类
Java集合类主要由两个接口派生出来的，如下：
1）Collection:
  i) Set 不能存放重复对象
  ii) List：可存放重复对象，有序
  iii) Queue 队列
  iv) SortedSet: 可对集合数据排序
2）Map
  i)SortedMap :可对集合数据排序
3）开发中常用的List接口的实现类如下：
i)Vector:线程安全，速度慢，一般使用ArrayList替换，当空间使用达到初始大小时，扩充容量为原来的两倍，
2）ArrayList:非线程安全，查询速度快，插入慢，当空间使用到初始大小时，扩充容量为原来的50%
3)LinkedList:链表接口，增删速度快，查询慢。

5、实现多线程编程的方式
1)继承Thread类
2）实现Runnable接口
3）使用ExecutorService、Callable、Future实现有返回结果的多线程

6、【equals】和 【==】 说明
1）两者在Object中，两者是一样的，没有区别，比较的是内存中存放的对象的地址
2）有些类重写了equals方法，如String、Integer等，String是比较的对象存储的内容。


7、String、StringBuffer、StringBuilder的说明
1）String：是不可变类(final)，一旦String对象被创建，包含在对象中的字符序列是不可变的，直到对象被销毁
  i)String类重写了equals方法，改变了这些对象相等的原则，改为判断对象的内容是否相等，具体请查看String类源码
  ii)String的本质是字符数组char[],其次String是final的，不可继承;
  iii)String是特殊的封装类型，使用String可以直接赋值，也可以用new来创建对象，但是这二者的实现机制不同。
  iv)String池的概念，Java运行时维护一个String池，池中的String对象不能重复，没有就创建，有则作罢，String池不属于堆和栈，而属于常量池。
  
   String str = "abc";  
   String str1 = "abc";  
   String str2 = new String("abc");  
   //上面第一句在String常量池中创建"abc"对象，str引用指向池中对象"abc",第二句时，常量池中已存在，所以直接指向同一个池中对象。
   //第三句创建的对象,如果单独此句时，标识创建两个对象，一个常量对象"abc",一个String对象；现在此句中在堆上创建一个String对象，内容是abc，str2指
   //向堆内存的首地址
   
   System.out.println(str == str1);  
   //上句应输出 true
   
   System.out.println(str1 == "abc");  
   //上句应输出 true
   
   System.out.println(str2 == "abc");  
   //上句应输出false，str2指向堆对象的引用
   
   System.out.println(str1 == str2);  
   //上句输出false
   
   System.out.println(str1.equals(str2));  
   //输出true,比较内容
   
   System.out.println(str1 == str2.intern());  
   //intern说明：由于此方法查询常量池中是否存在对应的内容，有则并返回对象引用
   //此句输出 true
   
   System.out.println(str2 == str2.intern());  
   //str2指向的是堆对象的引用，二者不同
   //输出 false
   
   System.out.println(str1.hashCode() == str2.hashCode());  
   //查看源码，此hashCode是对存储的内容取hash值
   //输出 true

2) StringBuffer 与 StringBuilder: 两个类的对象都是可变的，拼接字符串，不用每次都重新创建对象，效率高，
 i) StringBuffer：线程安全的
 ii)StringBuilder:非线程安全的，在方法内使用，建议使用此方法，性能高点。
  
8、继承与构造器的相关知识
1）Java构造器不是函数，不能被继承，所以如果调用父类的构造器时，需要用关键字super,并且要放在子类构造器的第一条语句。
2）父类没有定义构造器，如果子类没有显示的调用父类的构造器，则将自动调用父类的默认（无参数）构造器。
3）如果父类定义了带参数的构造器，但是没有定义无参数的构造器，并且子类也没有显示的调用父类的构造器，此时java编译器将报错。
